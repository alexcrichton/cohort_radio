#!/usr/bin/env ruby

puts 'Starting fargo worker..'

require File.expand_path('../../config/environment',  __FILE__)

require 'em/pusher'
require 'radio'

STDOUT.sync = true
Rails.logger = Fargo.logger = Radio.logger = Logger.new(STDOUT)

Resque::Status.expire_in = 1.day

EM.run {
  client = Fargo::Client.new
  client.config.color = true
  client.connect
  FargoSearch.client = FargoDownload.client = client

  # Radio.logger = Fargo.logger = Rails.logger
  radio = Radio.new

  # Worker queue to track search requests
  searcher = Resque::Worker.new 'search'

  # Clients communicate to us via websocket to download files and search
  # for things in fargo. Pusher requires that client-triggered events be on
  # private channels and that all events be prefixe with 'client-'. The same
  # goes for controlling the radio.
  #
  # Fargo events are performed in Resque::Worker objects to get better error
  # handling, reporting, etc.
  uri = URI.parse('http://ws.pusherapp.com/app/' + Pusher.key)
  EM::PusherSocket.uri = uri

  pusher = nil
  downloads = []
  pusher_callback = lambda do |ws|
    pusher = ws
    # ========== Fargo Events ==============

    # Search fargo event
    ws.bind_event 'private-fargo', 'client-search' do |data|
      Rails.logger.debug "Searching for: #{data.inspect}"
      searcher.perform Resque::Job.new('search', 'class' => 'FargoSearch',
                                                 'args'  => [data])
    end

    # Download a file from fargo
    ws.bind_event 'private-fargo', 'client-download' do |data|
      Rails.logger.debug "Downloading: #{data.inspect}"
      downloader = Resque::Worker.new 'downloader'
      # Create the Resque::Status object by hand because there's no queue
      # involement here because it doesn't really work like that...
      uuid = Resque::Status.create

      # Tell the client what their uuid is for this job so they can link to it
      # from the website.
      Pusher[data['channel']].trigger_async('job-uuid', :uuid => uuid,
                                                        :tth => data['tth'])

      job = Resque::Job.new('download', 'class' => 'FargoDownload',
                                        'args'  => [uuid, data])

      # The download can possibly take a long time. Defer this into another
      # thread so we don't block the reactor.
      downloads << uuid
      EM.defer lambda { downloader.perform job }, lambda { |_|
        downloads.delete uuid
      }
    end

    # ========== Radio Events ==============

    # Add playlist
    ws.bind_event 'private-radio', 'client-add' do |data|
      Rails.logger.debug "Adding: #{data['playlist_id']}"
      begin
        radio.add data['playlist_id']
      rescue ShoutError => e
        Pusher['playlist-' + data['playlist_id']].trigger_async('error',
          :message => e.message)
      end
    end

    # Remove playlist
    ws.bind_event 'private-radio', 'client-remove' do |data|
      Rails.logger.debug "Removing: #{data['playlist_id']}"
      radio.remove data['playlist_id']
    end

    # Next a song on a playlist
    ws.bind_event 'private-radio', 'client-next' do |data|
      Rails.logger.debug "Next song on: #{data['playlist_id']}"
      radio.next data['playlist_id']
    end
  end

  EM.connect uri.host, uri.port, EM::PusherSocket, &lambda
  EM.add_periodic_timer(3600) do
    pusher.close_connection(true)
    EM.connect uri.host, uri.port, EM::PusherSocket, &lambda
  end

  # Failed download jobs get placed back into normal resque queues when
  # they're done. These aren't very high priority jobs, so they don't need
  # the special treatment they're given above (immediate download initiation,
  # parallel downloading from different nicks, etc.). These are just jobs
  # that naturally fail, but still need to be restarted.
  queue = Resque::Worker.new('download')
  work = lambda {
    if job = queue.reserve
      EM.defer lambda { queue.perform job }, lambda { |_| EM.add_timer 5, work }
    else
      EM.add_timer 5, work
    end
  }
  work.call

  on_exit = lambda {
    pusher.close_connection(true)
    queue.shutdown
    searcher.shutdown
    radio.disconnect

    stop_reactor = lambda {
      if downloads.empty?
        EM.stop
        true
      else
        Rails.logger.info "Cannot stop reactor yet, #{downloads.size} " \
                          "download(s) remain"
        false
      end
    }
    stop_reactor.call || EM.add_periodic_timer(1, stop_reactor)
  }
  trap(:INT) { EM.schedule on_exit }
  trap(:TERM) { EM.schedule on_exit }
  trap(:QUIT) { EM.schedule on_exit }

  Playlist.update_all(:playing => false)
  Rails.logger.info 'Ready to work.'
}
