#!/usr/bin/env ruby

require File.expand_path('../../config/environment',  __FILE__)

require 'em/pusher'
require 'radio'

EM.run {
  client = Fargo::Client.new
  client.config.color = true
  # client.connect
  FargoSearch.client = FargoDownload.client = client

  # Radio.logger = Fargo.logger = Rails.logger
  radio = Radio.new
  # p Radio.logger.level
  radio.add Playlist.first.slug

  # Worker queue to track search requests
  searcher = Resque::Worker.new 'search'

  # Clients communicate to us via websocket to download files and search
  # for things in fargo. Pusher requires that client-triggered events be on
  # private channels and that all events be prefixe with 'client-'. The same
  # goes for controlling the radio.
  #
  # Fargo events are performed in Resque::Worker objects to get better error
  # handling, reporting, etc.
  uri = URI.parse('http://ws.pusherapp.com/app/' + Pusher.key)
  EM::PusherSocket.uri = uri

  EM.connect uri.host, uri.port, EM::PusherSocket do |ws|
    # Search fargo event
    ws.bind_event 'private-fargo', 'client-search' do |data|
      searcher.perform Resque::Job.new('search', 'class' => 'FargoSearch',
                                                 'args'  => [data])
    end

    # Download a file from fargo
    ws.bind_event 'private-fargo', 'client-download' do |data|
      downloader = Resque::Worker.new 'downloader'
      # Create the Resque::Status object by hand because there's no queue
      # involement here because it doesn't really work like that...
      uuid = Resque::Status.create

      # Tell the client what their uuid is for this job so they can link to it
      # from the website.
      Pusher[data['channel']].trigger_async('job-uuid', :uuid => uuid,
                                                        :tth => data['tth'])

      job = Resque::Job.new('download', 'class' => 'FargoDownload',
                                        'args'  => [uuid, data])

      # The download can possibly take a long time. Defer this into another
      # thread so we don't block the reactor.
      EM.defer { downloader.perform job }
    end
  end
}
